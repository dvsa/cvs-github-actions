name: Drop MySQL Schema
description: Drop a Schema in MySQL

inputs:
  environment-name:
    description: Environment Identifier (e.g. cb2-`1099`)
    required: true
  environment-type:
    description: Environment Type (e.g. `feature`, `develop` etc)
    required: true
  schema:
    description: Base Schema to drop (e.g. `CVSNOP`)
    required: true
  role-to-assume: 
    description: (Optional) Assume an AWS Role directly
    required: false
  dry-run:
    description: Don't perform action, just output information
    default: "true"

runs:
  using: composite
  steps:

    - name: Assume AWS Role
      id: aws-assume
      if: ${{ inputs.aws-role != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.aws-region }}
        role-session-name: ${{ inputs.role-session-name }}

    - name: 🛢️ Remove Schemas
      id: remove_schemas
      shell: bash

      run: |
        # Drop the requested Schema

        if [ "${{ inputs.environment-type }}" == "feature" ]; then
          schema="${{ inputs.schema }}$(echo ${{ inputs.environment-name }} | tr '[:lower:]' '[:upper:]' | tr -d '-')"
        else
          schema=${{ inputs.schema }}
        fi

        AWS_PROFILE=mgmt aws secretsmanager get-secret-value --secret-id ${{ inputs.environment-type }}/mysql/config --query SecretString --region=eu-west-1 --output text > my.cnf
        ${{ inputs.dry-run == 'true' && 'echo' || '' }} mysql --defaults-file=my.cnf -e "DROP SCHEMA IF EXISTS ${schema}"

    - name: Unset AWS Role
      id: aws-remove
      if: ${{ inputs.aws-role != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        unset-current-credentials: true
