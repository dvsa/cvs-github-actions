name: Terraform Destroy
description: Destroy an Environment using Terraform

inputs:
  environment-name:
    description: Environment Identifier (e.g. `cb2-1099`)
    required: true
  terraform-version:
    description: The version of Terraform to use (defaults to 1.3.9)
    default: 1.3.9
  dry-run:
    description: Don't perform destruction, just output information
    default: "true"

runs:
  using: composite
  steps:

    - name: Initialize Terraform
      uses: dvsa/cvs-github-actions/terraform-initialize@feature/CB2-10415
      with:
        terraform-version: ${{ inputs.terraform-version }}
        environment-name: ${{ inputs.environment-name }}
        create-workspace: 'false'

    - name: ðŸ”Ž Find Hash Files
      shell: bash
      run: |
        # Get list of Hash Files for ${{ inputs.environment-name }}
        terraform show -no-color | grep -E '.*id.*${{ inputs.environment-name }}.txt' | sed -E 's/.*"(.*)"/\1/' > hash_files.txt || echo "No files found"
        cat hash_files.txt

    - name: ðŸª¦ Remove VPC Connections
      shell: bash        
      run: |
        # Remove all Lambda VPC Connections
        prepend=$([[ "${{ inputs.dry-run }}" == 'true' ]] && echo "(dryrun) " || echo '')
        for lambda in $(terraform show -no-color | grep -E '\s+arn\s+=\s.*:lambda.*' | sed -E 's/.*"(.*:lambda.*:function:[a-z0-9-]+).*"/\1/' | sort | uniq); do
          echo "${prepend}remove: ${lambda}"
          if [ "${{ inputs.dry-run }}" == 'false' ]; then 
            AWS_PROFILE=main aws lambda update-function-configuration --function-name ${lambda} --vpc-config '{"SubnetIds":[], "SecurityGroupIds":[]}' >/dev/null

            AWS_PROFILE=main aws ec2 describe-network-interfaces \
              --query 'NetworkInterfaces[?contains(Description,`cb2-10512`)].[NetworkInterfaceId, Attachment.AttachmentId]' | \
              jq -c '.[]' \
              | while read interface;
              do
                                
                interfaceid=$( echo $interface | jq -r '.[0]' )
                attachmentid=$( echo $interface | jq -r '.[1]' )

                AWS_PROFILE=main aws ec2 modify-network-interface-attribute --network-interface-id $interfaceid --attachment "AttachmentId=${attachmentid},DeleteOnTermination=true"
                #AWS_PROFILE=main aws ec2 detach-network-interface --attachment-id $attachmentid
              done
          fi
        done

    - name: Terraform Plan
      uses: dvsa/cvs-github-actions/terraform-plan@feature/CB2-10415
      with:
        options: '-destroy'
        validate: 'false'
        environment-name: ${{ inputs.environment-name }}
        terraform-version: ${{ inputs.terraform-version }}
        create-workspace: 'false'

    - name: ðŸ’£ Terraform Destroy
      if: ${{ inputs.dry-run == 'false' }}
      uses: dvsa/cvs-github-actions/terraform-apply@feature/CB2-10415
      with:
        terraform-version: ${{ inputs.terraform-version }}
        environment-name: ${{ inputs.environment-name }}
        create-workspace: 'false'
        
    - name: ðŸ’£ Remove Workspace
      if: ${{ inputs.dry-run == 'false' }}
      shell: bash
      run: |
        # Remove ${{ inputs.environment-name }} Workspace
        terraform workspace select default
        terraform workspace delete ${{ inputs.environment-name }} 
        echo "Terraform Workspace \`${{ inputs.environment-name }}\` Deleted!" >> $GITHUB_STEP_SUMMARY

    - name: ðŸ“ƒ Remove Hash Files
      id: remove_hash_files
      shell: bash
      run: |
        # Remove all hash files for ${{ inputs.environment-name }}
        dryrun=$([[ "${{ inputs.dry-run }}" == 'true' ]] && echo "--dryrun" || echo '')
        for hash in $(cat hash_files.txt); do 
          AWS_PROFILE=mgmt aws s3 rm s3://${hash} $dryrun
        done
