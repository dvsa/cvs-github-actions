name: Build zip and upload hash

on:
 workflow_call:
   inputs:
     mono_repo:
       type: boolean
       default: false
   secrets:
     CVS_MGMT_AWS_ROLE:
       required: true
     DVSA_AWS_REGION:
       required: true

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: extract services (YAML)
        if: ${{ inputs.mono_repo == true }}
        id: extract_services
        run: |
          {
          echo 'SERVICES_LIST_JSON<<EOF'
          jq . services.json
          echo EOF
          } >> "$GITHUB_ENV"
#          readarray -t SERVICES_LIST < <(jq -r '.[]' services.json)
#          echo "SERVICES_LIST=$SERVICES_LIST" >> $GITHUB_ENV
#          for x in "${SERVICES_LIST[@]}"; do
#            echo "service: $x"
#          done

#      - name: Get AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.CVS_MGMT_AWS_ROLE }}
#          aws-region: ${{ secrets.DVSA_AWS_REGION }}
#          role-session-name: '${{ github.event.repository.name }}-hash-upload'
#
#      - name: Make bucket name
#        env:
#          BUCKET_NAME: ${{ github.event.repository.name }}
#        run: |
#          BUCKET_NAME=$(echo "$BUCKET_NAME" | sed -e "s/cvs-//" -e "s/svc-//" -e "s/tsk-//" -e "s/app-//")
#          echo "BUCKET_NAME=${BUCKET_NAME,,}" >> $GITHUB_ENV
#          echo "BUCKET_NAME: $BUCKET_NAME"

      - name: Check if hash file exists
        run: |
          jq -r '.[]' services.json | xargs -I SERVICE echo ${{ github.event.repository.name }}-SERVICE
 #         for x in "${SERVICES_FROM_JSON[@]}"; do
 #           echo "service: $x"
 #         done

#    MONO_REPOSITORIES.get(REPO).each { monoRepoName ->
#    def SERVICE_NAME_SHORT_MONO_REPO = "${SERVICE_NAME_SHORT}-${monoRepoName}"    // e.g. "reference-data-GetTypeKeyLambdaFunction"
#        // if the zip exists, this will be 0
#        def ZIP_EXISTS = sh(script: "aws s3api head-object --bucket cvs-services --key ${SERVICE_NAME_SHORT_MONO_REPO}/${REPO_HASH}.zip > /dev/null 2>&1", returnStatus:true)
#        if (ZIP_EXISTS != 0){
#            MONO_REPO_REMOVE = false
#        }
#    }

#          aws s3api head-object --bucket cvs-services --key ${{ env.BUCKET_NAME }}-test/${{ github.sha }}.zip > /dev/null 2>&1 || ZIP_DOES_NOT_EXIST=true
#          echo "ZIP_DOES_NOT_EXIST=$ZIP_DOES_NOT_EXIST" >> $GITHUB_ENV
#          echo "ZIP_DOES_NOT_EXIST: $ZIP_DOES_NOT_EXIST" >> $GITHUB_STEP_SUMMARY

#      - name: Setup Node.js
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        uses: actions/setup-node@v4
#        with:
#          node-version-file: '.nvmrc'
#
#      - name: Install dependencies
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: npm ci
#
#      - name: Install tools
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: npm run tools-setup
#
#      - name: Build Artifact
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: npm run build
#
#      - name: Test
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: npm run test
#
#      - name: Test I
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: npm run test-i
#
#      - name: Package Artifact
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        env:
#            ZIP_NAME: ${{ github.sha }}
#        run: npm run package
#
#      - name: Generate SHA256 hash
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: |
#          NODE_SHA=$(openssl dgst -sha256 -binary ${{ github.sha }}.zip | openssl enc -base64)
#          echo "NODE_SHA=$NODE_SHA" >> $GITHUB_ENV
#          echo "NODE_SHA: $NODE_SHA" >> $GITHUB_STEP_SUMMARY
#
#      - name: Upload hash zip to S3
#        if: ${{ env.ZIP_DOES_NOT_EXIST }}
#        run: |
#          aws s3 cp ${{ github.sha }}.zip s3://cvs-services/${{ env.BUCKET_NAME }}-test/${{ github.sha }}.zip --metadata 'sha256sum=${{ env.NODE_SHA }},Tag=${{ env.BUCKET_NAME }}-test'
#
#      - name: Make branch lowercase
#        env:
#          SHORT_BRANCH: ${{ github.ref_name }}
#        run: |
#          SHORT_BRANCH=${SHORT_BRANCH##*/}
#          echo "SHORT_BRANCH=${SHORT_BRANCH,,}" >> $GITHUB_ENV
#
#      - name: Upload ref txt to S3
#        run: |
#          echo ${{ github.sha }} > hash.txt
#          aws s3 cp hash.txt s3://cvs-services/${{ env.BUCKET_NAME }}-test/latestHash_${{ env.SHORT_BRANCH }}.txt --metadata 'Tag=${{ env.BUCKET_NAME }}-test'
