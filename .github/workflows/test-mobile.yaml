name: Test Mobile

on: 
 workflow_call:
  inputs:
    environment:
      required: true
      type: string
    builder:
      required: false
      type: string
      default: ubuntu-latest
    retention_days:
      required: false
      type: number
      default: 1
  secrets:
    MGMT_ROLE_NAME:
      required: true
      description: The AWS Role for the Management Account.

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Test VTA [${{ inputs.environment }}]
    runs-on: ${{ inputs.builder }}
    environment: ${{ inputs.environment }}
    outputs:
      branch: ${{ steps.extract_branch.outputs.BRANCH }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '11'

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.MGMT_ROLE_NAME }}
          aws-region: eu-west-1
          role-session-name: ServiceAutoGHAMGMT

      - uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: 'vta-automation/env'
          parse-json-secrets: true

      - name: 🛸 Extract Branch
        shell: bash
        run: |
          unfeature=$(echo ${GITHUB_REF_NAME#feature/})
          branch=$(python3 -c "print('$unfeature'.lower())")
          echo "BRANCH=$(echo $branch)" >> $GITHUB_OUTPUT
        id: extract_branch
        
      - name: 🔍 Configure Settings Files
        run: |
          mkdir creds
          aws secretsmanager get-secret-value --secret-id ${{ env.VTA_AUTOMATION_ENV_CREDENTIALS }} --query SecretString --output text > creds/credentials.json
          aws secretsmanager get-secret-value --secret-id ${{ env.VTA_AUTOMATION_ENV_OPENVISITS }} --query SecretString --output text > creds/openVisit.ts
          echo ${{ env.VTA_AUTOMATION_ENV_NPMJS_REGISTRY }} >> .npmrc
          echo ${{ env.VTA_AUTOMATION_ENV_NPM_PKG }} >> .npmrc
          echo "BRANCH=${{ steps.extract_branch.outputs.BRANCH }}" > .env

      - name: 📱 Get App.app
        env:
          ARTEFACTS: ${{ env.VTA_AUTOMATION_ENV_AWS_ARTEFACT_BUCKET }}
        run: |
          mkdir apps
          OBJECT="$(aws s3 ls s3://${{ env.ARTEFACTS }}/github-actions/files/${{ inputs.environment }}/ --recursive | sort | grep 'APP.txt' | tail -n 1 | awk '{print $4}')"
          aws s3 cp s3://${{ env.ARTEFACTS }}/$OBJECT apps/develop-APP.txt
          wget -q -O apps/CVSMobile.App.zip `cat apps/develop-APP.txt`
          unzip -qq apps/CVSMobile.App.zip -d apps/

      - name: 🛠️ Install Dependencies
        run: | 
          echo "NPM: $(which npm)"
          echo "NODE: $(which node)"
          echo "NODE VERSION: $(node -v)"
          npm i
        
      - name: 🛠️ Run Automation Suite
        run: npm run wdio:vta:ap:report

      - name: 📑 Generate Reports
        run: npm run s3report

      - name: 🤐 Zip Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vta-report-${{ steps.extract_branch.outputs.branch }}-${{ github.run_id }}
          path: reports/allure-report
          retention-days: ${{ inputs.retention_days }}

      - name: ⬆️ Upload S3
        run: |
          zip -r reports.zip reports/
          aws s3 cp reports.zip s3://${{ env.VTA_AUTOMATION_ENV_AWS_REPORT_BUCKET }}/github-actions/${{ inputs.environment }}/report-${{ steps.extract_branch.outputs.branch }}-${{ github.run_id }}.zip

  deploy:
     if: always()
     name: 📑 Publish to GitHub Pages
     runs-on: ubuntu-latest
     needs: [ test ]
     steps:
       - name: ⬇️ Download Artifacts
         uses: actions/download-artifact@v4
         id: download
         with:
           name: vta-report-${{ needs.test.outputs.branch }}-${{ github.run_id }}
           path: reports
         
       - name: ✅ Validate Workspace
         run: ls -lah reports
       
       - name: 📑 Deploy Report to Github Pages
         if: always()
         uses: peaceiris/actions-gh-pages@v3.9.3
         with: 
           github_token: ${{ secrets.GITHUB_TOKEN }}
           publish_dir: reports
           publish_branch: gh-pages
           destination_dir: ${{ needs.test.outputs.branch }}/${{ github.run_id }}
       
       - name: Output Report Link
         run: echo "https://super-funicular-597oy3e.pages.github.io/${{ needs.test.outputs.branch }}/${{ github.run_id }}/" >> $GITHUB_STEP_SUMMARY
